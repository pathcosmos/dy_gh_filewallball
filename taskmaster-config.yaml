project:
  name: "FileWallBall API System"
  description: "FastAPI 기반 파일 업로드/조회/다운로드 시스템"
  version: "1.0.0"

context:
  system_prompt: |
    당신은 FileWallBall API 시스템의 개발을 지원하는 AI 어시스턴트입니다.
    이 시스템은 FastAPI 기반의 파일 관리 API로, 다음과 같은 기능을 제공합니다:
    - 파일 업로드 (POST /upload)
    - 파일 정보 조회 (GET /files/{file_id})
    - 파일 다운로드 (GET /download/{file_id})
    - 파일 미리보기 (GET /view/{file_id})
    - 파일 목록 조회 (GET /files)
    - 파일 삭제 (DELETE /files/{file_id})

    시스템은 MicroK8s에서 구동되며, Redis를 캐시로 사용하고,
    Horizontal Pod Autoscaler를 통해 자동 스케일링을 지원합니다.

  development_goals:
    - "안정적이고 확장 가능한 파일 관리 API 구축"
    - "실시간 요청에 따른 자동 스케일링 구현"
    - "Taskmaster-AI를 활용한 효율적인 개발 프로세스"
    - "MicroK8s 환경에서의 최적화된 배포"

  architecture:
    frontend: "FastAPI REST API"
    backend: "Python 3.11, FastAPI, Uvicorn"
    database: "Redis (캐시 및 메타데이터)"
    storage: "Kubernetes PersistentVolume"
    orchestration: "Kubernetes (MicroK8s)"
    monitoring: "Prometheus 메트릭"

  api_endpoints:
    - "POST /upload - 파일 업로드"
    - "GET /files/{file_id} - 파일 정보 조회"
    - "GET /download/{file_id} - 파일 다운로드"
    - "GET /view/{file_id} - 파일 미리보기"
    - "GET /files - 파일 목록 조회"
    - "DELETE /files/{file_id} - 파일 삭제"
    - "GET /health - 헬스체크"
    - "GET /metrics - Prometheus 메트릭"

  deployment:
    kubernetes:
      namespace: "filewallball"
      replicas: "2-10 (HPA)"
      storage: "10Gi PersistentVolume"
    services:
      - "filewallball-service (ClusterIP)"
      - "filewallball-ingress (LoadBalancer)"
      - "redis-service (ClusterIP)"

  monitoring:
    metrics:
      - "file_uploads_total"
      - "file_downloads_total"
      - "file_upload_duration_seconds"
    health_checks:
      - "liveness probe"
      - "readiness probe"
    autoscaling:
      - "CPU utilization > 70%"
      - "Memory utilization > 80%"

development_workflow:
  phases:
    - name: "설계 및 아키텍처"
      tasks:
        - "API 엔드포인트 설계"
        - "데이터 모델 정의"
        - "Kubernetes 리소스 설계"

    - name: "개발 및 구현"
      tasks:
        - "FastAPI 애플리케이션 개발"
        - "Redis 통합 구현"
        - "파일 업로드/다운로드 로직"
        - "에러 처리 및 검증"

    - name: "테스트 및 검증"
      tasks:
        - "단위 테스트 작성"
        - "통합 테스트 수행"
        - "성능 테스트 실행"
        - "보안 검증"

    - name: "배포 및 운영"
      tasks:
        - "Docker 이미지 빌드"
        - "Kubernetes 배포"
        - "모니터링 설정"
        - "자동 스케일링 검증"

  coding_standards:
    - "Python PEP 8 준수"
    - "FastAPI 베스트 프랙티스 적용"
    - "비동기 프로그래밍 활용"
    - "적절한 에러 처리"
    - "보안 고려사항 적용"

  testing_strategy:
    - "단위 테스트: pytest 사용"
    - "통합 테스트: API 엔드포인트 테스트"
    - "성능 테스트: 부하 테스트"
    - "보안 테스트: 파일 업로드 보안 검증"

  deployment_strategy:
    - "Blue-Green 배포"
    - "롤링 업데이트"
    - "자동 롤백 기능"
    - "헬스체크 기반 배포"

current_focus:
  priority: "시스템 안정성 및 성능 최적화"
  immediate_tasks:
    - "API 응답 시간 최적화"
    - "파일 업로드 크기 제한 설정"
    - "보안 헤더 추가"
    - "로깅 시스템 개선"

  next_milestones:
    - "사용자 인증 시스템 추가"
    - "파일 암호화 기능"
    - "CDN 통합"
    - "백업 및 복구 시스템"

collaboration:
  team_roles:
    - "Backend Developer: FastAPI 개발"
    - "DevOps Engineer: Kubernetes 배포"
    - "QA Engineer: 테스트 및 검증"
    - "Security Engineer: 보안 검토"

  communication:
    - "일일 스탠드업"
    - "주간 리뷰"
    - "스프린트 계획"
    - "코드 리뷰 프로세스"
