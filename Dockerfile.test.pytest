# Test container for Python/pytest tests
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    jq \
    netcat-traditional \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies  
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir pytest pytest-asyncio pytest-cov httpx

# Copy test files and application code
COPY tests/ tests/
COPY test_*.py ./
COPY pytest.ini .
COPY app/ app/
COPY alembic/ alembic/
COPY alembic.ini .

# Create necessary directories
RUN mkdir -p /app/test_results /app/test_uploads /app/logs

# Service readiness check script
RUN cat > /app/wait-for-services.sh << 'EOF'
#!/bin/bash
set -e

echo "🔍 Waiting for test services to be ready..."

echo "Waiting for MariaDB..."
while ! nc -z mariadb-test 3306; do
  echo "MariaDB not ready, waiting..."
  sleep 2
done
echo "✅ MariaDB is ready!"

echo "Waiting for Redis..."
while ! nc -z redis-test 6379; do
  echo "Redis not ready, waiting..."
  sleep 2
done  
echo "✅ Redis is ready!"

echo "Waiting for FileWallBall API..."
max_attempts=30
attempt=0
while [ $attempt -lt $max_attempts ]; do
  if curl -f http://filewallball-test-app:8000/health > /dev/null 2>&1; then
    echo "✅ FileWallBall API is ready!"
    break
  fi
  echo "API not ready, waiting... (attempt $((attempt+1))/$max_attempts)"
  sleep 5
  attempt=$((attempt+1))
done

if [ $attempt -eq $max_attempts ]; then
  echo "❌ Failed to connect to FileWallBall API after $max_attempts attempts"
  exit 1
fi

echo "🚀 All services are ready. Starting tests..."
EOF

RUN chmod +x /app/wait-for-services.sh

# Test execution script
RUN cat > /app/run-tests.sh << 'EOF'
#!/bin/bash
set -e

# Wait for services
/app/wait-for-services.sh

echo "🧪 Running comprehensive test suite..."

# Create test results directories
mkdir -p /app/test_results/{unit,integration,api}

# Run unit tests
echo "📋 Running unit tests..."
pytest tests/unit/ -v \
  --cov=app \
  --cov-report=html:/app/test_results/unit/htmlcov \
  --cov-report=xml:/app/test_results/unit/coverage.xml \
  --junitxml=/app/test_results/unit/junit.xml \
  || echo "❌ Unit tests failed"

# Run integration tests  
echo "🔗 Running integration tests..."
pytest tests/integration/ -v \
  --cov=app \
  --cov-report=html:/app/test_results/integration/htmlcov \
  --cov-report=xml:/app/test_results/integration/coverage.xml \
  --junitxml=/app/test_results/integration/junit.xml \
  || echo "❌ Integration tests failed"

# Run standalone test files
echo "🎯 Running standalone tests..."
for test_file in test_*.py; do
  if [ -f "$test_file" ]; then
    echo "Running $test_file..."
    python "$test_file" || echo "❌ $test_file failed"
  fi
done

echo "✅ Test execution completed. Results saved to /app/test_results/"
EOF

RUN chmod +x /app/run-tests.sh

# Default command
CMD ["/app/run-tests.sh"]