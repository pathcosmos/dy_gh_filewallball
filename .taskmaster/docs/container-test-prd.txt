# FileWallBall Ubuntu Container 전체 워크플로우 테스트 PRD

## 프로젝트 개요
Ubuntu 컨테이너 환경에서 FileWallBall API 시스템의 전체 워크플로우를 테스트하는 프로젝트입니다. 프로젝트 키 생성부터 파일 업로드, 다운로드까지 모든 기능이 정상적으로 동작하는지 검증합니다.

## 목표
- Ubuntu 컨테이너 환경에서 FileWallBall API 시스템 구축
- 프로젝트 키 생성 기능 테스트
- 파일 업로드 기능 테스트
- 파일 다운로드 기능 테스트
- 파일 조회 및 관리 기능 테스트
- 전체 워크플로우의 안정성 검증

## 기술 스택
- **컨테이너**: Docker, Docker Compose
- **운영체제**: Ubuntu (컨테이너)
- **API**: FastAPI (FileWallBall)
- **데이터베이스**: MariaDB
- **캐시**: Redis
- **테스트 도구**: curl, jq, bash 스크립트

## 핵심 기능 요구사항

### 1. 컨테이너 환경 구축
- Ubuntu 기반 Docker 컨테이너 생성
- Docker Compose를 통한 서비스 오케스트레이션
- 네트워크 및 볼륨 설정
- 환경 변수 구성

### 2. API 서비스 배포
- FileWallBall API 컨테이너 실행
- MariaDB 데이터베이스 컨테이너 실행
- Redis 캐시 컨테이너 실행
- 서비스 간 의존성 관리

### 3. 프로젝트 키 생성 테스트
- 마스터 키를 사용한 프로젝트 키 생성
- 프로젝트명과 요청 날짜 기반 키 생성
- 생성된 키의 유효성 검증

### 4. 파일 업로드 테스트
- 다양한 파일 형식 업로드 테스트
- 파일 ID 및 다운로드 URL 생성 확인
- 업로드된 파일의 메타데이터 검증

### 5. 파일 다운로드 테스트
- 생성된 다운로드 URL을 통한 파일 다운로드
- 원본 파일과 다운로드된 파일의 무결성 검증
- 파일 크기 및 내용 일치성 확인

### 6. 파일 관리 기능 테스트
- 파일 정보 조회
- 파일 목록 조회
- 파일 삭제 기능

### 7. 전체 워크플로우 테스트
- 키 생성 → 업로드 → 다운로드 → 검증의 전체 과정
- 에러 처리 및 복구 테스트
- 성능 및 안정성 검증

## 테스트 시나리오

### 시나리오 1: 기본 워크플로우
1. Ubuntu 컨테이너 시작
2. Docker Compose로 서비스 배포
3. API 헬스체크 확인
4. 프로젝트 키 생성
5. 테스트 파일 업로드
6. 파일 다운로드
7. 파일 무결성 검증

### 시나리오 2: 다양한 파일 형식 테스트
1. 텍스트 파일 업로드/다운로드
2. 이미지 파일 업로드/다운로드
3. 바이너리 파일 업로드/다운로드
4. 대용량 파일 업로드/다운로드

### 시나리오 3: 에러 처리 테스트
1. 잘못된 프로젝트 키로 업로드 시도
2. 존재하지 않는 파일 다운로드 시도
3. 네트워크 오류 상황 시뮬레이션
4. 서비스 재시작 후 데이터 복구 확인

## 성공 기준
- 모든 API 엔드포인트가 정상 응답
- 파일 업로드/다운로드 시 데이터 무결성 보장
- 프로젝트 키 생성 및 검증 정상 동작
- 전체 워크플로우 완료 시간 5분 이내
- 에러 상황에서 적절한 응답 및 복구

## 제약사항
- Ubuntu 컨테이너 환경에서만 테스트
- Docker 및 Docker Compose 필요
- 최소 2GB 메모리 및 5GB 디스크 공간
- 네트워크 연결 필요 (이미지 다운로드용)

## 테스트 결과물
- 테스트 실행 로그
- 성능 측정 결과
- 에러 로그 및 해결 방안
- 테스트 자동화 스크립트
- 컨테이너 환경 구성 파일 