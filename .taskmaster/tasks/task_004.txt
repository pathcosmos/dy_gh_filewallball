# Task ID: 4
# Title: FastAPI 애플리케이션 기본 구조 구축
# Status: done
# Dependencies: 2, 3
# Priority: high
# Description: FastAPI 프로젝트 구조 생성, 의존성 관리, 기본 설정
# Details:
프로젝트 구조:
```
app/
├── main.py
├── models/
│   ├── __init__.py
│   ├── file_models.py
│   └── database.py
├── routers/
│   ├── __init__.py
│   ├── files.py
│   └── health.py
├── services/
│   ├── __init__.py
│   ├── file_service.py
│   └── cache_service.py
└── config.py
```
requirements.txt:
```
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
mariadb==1.1.8
redis==5.0.1
python-multipart==0.0.6
aiofiles==23.2.1
```
환경 변수 설정, CORS 미들웨어, 로깅 설정

# Test Strategy:
FastAPI 서버 시작 테스트, 기본 라우트 응답 확인, 의존성 주입 테스트, 환경 설정 로드 검증

# Subtasks:
## 1. FastAPI 프로젝트 초기 구조 생성 및 main.py 구현 [done]
### Dependencies: None
### Description: FastAPI 애플리케이션의 기본 디렉토리 구조를 생성하고 main.py 파일에 FastAPI 인스턴스 초기화 및 기본 설정 구현
### Details:
프로젝트 디렉토리 구조 생성 (app/, models/, routers/, services/), main.py에 FastAPI 인스턴스 생성, 기본 라우터 등록, 애플리케이션 시작점 구현, lifespan 이벤트 핸들러 설정

## 2. 환경 설정 관리 시스템 구현 [done]
### Dependencies: 4.1
### Description: config.py 파일 구현 및 환경 변수 기반 설정 관리 시스템 구축
### Details:
pydantic BaseSettings를 활용한 config.py 구현, .env 파일 지원, 데이터베이스 연결 정보(MariaDB, Redis), 파일 저장 경로, 업로드 제한 설정, 로깅 레벨 설정, CORS 허용 도메인 설정 등 환경 변수 관리

## 3. 미들웨어 및 로깅 시스템 설정 [done]
### Dependencies: 4.1, 4.2
### Description: CORS 미들웨어 구성, 구조화된 로깅 시스템 구현, 요청/응답 로깅 미들웨어 추가
### Details:
FastAPI CORSMiddleware 설정, Python logging 모듈을 활용한 로거 구성, 요청 ID 추가 미들웨어, 응답 시간 측정 미들웨어, 로그 포맷터 설정 (JSON 형식 지원), 로그 레벨별 파일 분리 저장

## 4. 의존성 주입 시스템 및 공통 의존성 구현 [done]
### Dependencies: 4.2, 4.3
### Description: FastAPI의 의존성 주입 시스템을 활용한 공통 의존성 함수 구현 및 전역 의존성 설정
### Details:
데이터베이스 세션 의존성 함수 구현, Redis 연결 의존성, 인증/인가 의존성 준비, 파일 업로드 크기 제한 의존성, 요청 검증 의존성, 에러 핸들러 등록

## 5. Health Check 엔드포인트 및 기본 라우터 구현 [done]
### Dependencies: 4.1, 4.4
### Description: 애플리케이션 상태 확인을 위한 health check 엔드포인트 구현 및 기본 라우터 설정
### Details:
health.py 라우터 구현 (/health, /ready 엔드포인트), 데이터베이스 연결 상태 확인, Redis 연결 상태 확인, 파일 시스템 접근 권한 확인, 버전 정보 반환, 라우터 prefix 및 태그 설정

