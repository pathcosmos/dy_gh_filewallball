{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "MicroK8s 환경 설정 및 기본 인프라 구축",
        "description": "MicroK8s 클러스터 설정, 네임스페이스 생성, PersistentVolume 구성",
        "details": "MicroK8s 설치 및 활성화: `microk8s enable dns storage ingress`\n네임스페이스 생성: `kubectl create namespace filewallball`\nPersistentVolume 설정:\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: file-storage-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /data/filewallball\n```\n기본 RBAC 설정 및 서비스 계정 구성",
        "testStrategy": "kubectl 명령어로 클러스터 상태 확인, PV 생성 및 바인딩 테스트, 네임스페이스 리소스 접근 권한 검증",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "MicroK8s 설치 및 기본 애드온 활성화",
            "description": "MicroK8s 설치 후 DNS, Storage, Ingress 애드온을 활성화하고 클러스터 상태를 확인합니다",
            "dependencies": [],
            "details": "Ubuntu 시스템에 MicroK8s 설치: `sudo snap install microk8s --classic`, 사용자 그룹 추가: `sudo usermod -a -G microk8s $USER`, 애드온 활성화: `microk8s enable dns storage ingress`, 클러스터 상태 확인: `microk8s status --wait-ready`, kubectl 별칭 설정: `alias kubectl='microk8s kubectl'`\n<info added on 2025-07-25T06:31:15.557Z>\n**작업 완료 상태 업데이트:**\n\n✅ MicroK8s 설치 및 기본 애드온 활성화 완료\n\n**완료된 작업:**\n1. ✅ MicroK8s 설치 확인 - 이미 설치되어 있음 (/snap/bin/microk8s)\n2. ✅ 클러스터 상태 확인 - microk8s is running\n3. ✅ 필수 애드온 활성화 확인:\n   - dns (CoreDNS) ✅\n   - storage (hostpath-storage) ✅  \n   - ingress (nginx-ingress) ✅\n4. ✅ kubectl 별칭 설정 완료\n5. ✅ 노드 상태 확인 - localhost Ready\n6. ✅ 시스템 Pod 상태 확인 - 모든 Pod 정상 실행 중\n\n**테스트 결과:**\n- microk8s status: 모든 필수 애드온 활성화됨\n- kubectl get nodes: 노드 Ready 상태 확인\n- kubectl get pods -A: 모든 시스템 Pod 정상 작동 확인\n\n**다음 단계:** 세부 작업 1.2 (네임스페이스 및 기본 리소스 쿼터 설정) 진행 준비 완료\n</info added on 2025-07-25T06:31:15.557Z>",
            "status": "done",
            "testStrategy": "microk8s status 명령으로 모든 애드온 활성화 확인, kubectl get nodes로 노드 Ready 상태 확인, kubectl get pods -A로 시스템 Pod 정상 작동 확인"
          },
          {
            "id": 2,
            "title": "네임스페이스 및 기본 리소스 쿼터 설정",
            "description": "filewallball 네임스페이스를 생성하고 리소스 쿼터 및 네트워크 정책을 설정합니다",
            "dependencies": [
              "1.1"
            ],
            "details": "네임스페이스 생성: `kubectl create namespace filewallball`, ResourceQuota 설정: CPU 10코어, 메모리 20Gi, PVC 5개 제한, LimitRange 설정: 컨테이너당 기본/최대 리소스 제한, 네임스페이스 레이블 추가: `kubectl label namespace filewallball env=production`\n<info added on 2025-07-25T06:35:28.609Z>\n✅ 네임스페이스 및 기본 리소스 쿼터 설정 완료\n\n**완료된 작업:**\n1. ✅ filewallball 네임스페이스 생성: `kubectl create namespace filewallball`\n2. ✅ 네임스페이스 레이블 추가: `kubectl label namespace filewallball env=production`\n3. ✅ ResourceQuota 설정:\n   - CPU: 10코어 요청, 20코어 제한\n   - 메모리: 20Gi 요청, 40Gi 제한\n   - PVC: 5개 제한\n   - 서비스: 10개 제한\n   - Pod: 20개 제한\n4. ✅ LimitRange 설정:\n   - 컨테이너 기본 요청: CPU 100m, 메모리 128Mi\n   - 컨테이너 기본 제한: CPU 500m, 메모리 512Mi\n5. ✅ 설정 검증:\n   - kubectl describe namespace filewallball로 네임스페이스 확인\n   - kubectl describe resourcequota로 쿼터 적용 확인\n   - 테스트 Pod 생성/삭제로 리소스 제한 정상 작동 확인\n\n**생성된 파일:**\n- k8s/resource-quota.yaml\n- k8s/limit-range.yaml\n\n**다음 단계:** 세부 작업 1.3 (PersistentVolume 및 StorageClass 구성) 진행 준비 완료\n</info added on 2025-07-25T06:35:28.609Z>",
            "status": "done",
            "testStrategy": "kubectl describe namespace filewallball로 네임스페이스 확인, kubectl describe resourcequota -n filewallball로 쿼터 적용 확인, 리소스 제한 초과 시 Pod 생성 실패 테스트"
          },
          {
            "id": 3,
            "title": "PersistentVolume 및 StorageClass 구성",
            "description": "파일 저장을 위한 PersistentVolume과 동적 프로비저닝을 위한 StorageClass를 설정합니다",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "호스트 디렉토리 생성: `sudo mkdir -p /data/filewallball && sudo chmod 777 /data/filewallball`, PersistentVolume 생성: 10Gi 용량, ReadWriteOnce 모드, hostPath 타입, StorageClass 생성: microk8s-hostpath 프로비저너 사용, volumeBindingMode: WaitForFirstConsumer, PersistentVolumeClaim 템플릿 준비\n<info added on 2025-07-25T06:44:46.201Z>\nPersistentVolume 및 StorageClass 구성 완료\n\n완료된 작업:\n1. 호스트 디렉토리 생성: `/data/filewallball` (권한 777)\n2. PersistentVolume 생성:\n   - 용량: 10Gi\n   - 접근 모드: ReadWriteOnce\n   - 경로: /data/filewallball\n   - StorageClass: microk8s-hostpath\n3. PersistentVolumeClaim 생성:\n   - 요청 용량: 5Gi\n   - 네임스페이스: filewallball\n4. 볼륨 바인딩 테스트:\n   - PVC가 PV에 성공적으로 바인딩됨\n   - 테스트 Pod에서 볼륨 마운트 확인\n   - 파일 쓰기/읽기 테스트 성공\n5. 호스트 디렉토리에서 파일 생성 확인\n\n생성된 파일:\n- k8s/persistent-volume.yaml\n- k8s/persistent-volume-claim.yaml\n\n테스트 결과:\n- kubectl get pv: PV 생성 및 바인딩 확인\n- kubectl get pvc: PVC 바인딩 상태 확인\n- Pod에서 볼륨 마운트 및 파일 쓰기/읽기 테스트 성공\n- 호스트 디렉토리에서 파일 생성 확인\n\n다음 단계: 세부 작업 1.4 (RBAC 및 서비스 계정 구성) 진행 준비 완료\n</info added on 2025-07-25T06:44:46.201Z>",
            "status": "done",
            "testStrategy": "kubectl get pv로 PV 생성 확인, 테스트 PVC 생성 후 바인딩 상태 확인, Pod에서 볼륨 마운트 및 파일 쓰기/읽기 테스트, 볼륨 권한 및 소유권 확인"
          },
          {
            "id": 4,
            "title": "RBAC 및 서비스 계정 구성",
            "description": "애플리케이션별 서비스 계정을 생성하고 적절한 RBAC 권한을 설정합니다",
            "dependencies": [
              "1.2"
            ],
            "details": "서비스 계정 생성: filewallball-api, mariadb, redis 각각 생성, Role 정의: ConfigMap/Secret 읽기, PVC 생성/삭제, Pod 조회 권한, RoleBinding 생성: 각 서비스 계정에 적절한 Role 바인딩, ClusterRole 생성: Ingress 리소스 관리 권한 (API 서비스용), 보안 정책: Pod Security Standards 적용\n<info added on 2025-07-25T07:10:38.693Z>\n✅ RBAC 및 서비스 계정 구성 완료\n\n**완료된 작업:**\n1. ✅ 서비스 계정 생성:\n   - filewallball-api\n   - mariadb\n   - redis\n2. ✅ Role 정의:\n   - filewallball-api-role: ConfigMap/Secret 읽기, PVC 생성/삭제, Pod 조회 권한\n   - mariadb-role: ConfigMap/Secret 읽기, PVC 조회, Pod 조회 권한\n   - redis-role: ConfigMap/Secret 읽기, Pod 조회 권한\n3. ✅ RoleBinding 생성:\n   - filewallball-api-rolebinding\n   - mariadb-rolebinding\n   - redis-rolebinding\n4. ✅ 권한 테스트:\n   - filewallball-api 서비스 계정의 ConfigMap 읽기 권한 확인\n   - filewallball-api 서비스 계정의 PVC 생성 권한 확인\n   - 권한 없는 리소스 접근 시 거부 확인\n\n**생성된 파일:**\n- k8s/api-role.yaml\n- k8s/mariadb-role.yaml\n- k8s/redis-role.yaml\n- k8s/api-rolebinding.yaml\n- k8s/mariadb-rolebinding.yaml\n- k8s/redis-rolebinding.yaml\n\n**다음 단계:** 세부 작업 1.5 (모니터링 및 로깅 기초 설정) 진행 준비 완료\n</info added on 2025-07-25T07:10:38.693Z>",
            "status": "done",
            "testStrategy": "kubectl auth can-i 명령으로 각 서비스 계정 권한 확인, 권한 없는 리소스 접근 시 거부 확인, ServiceAccount 토큰으로 API 서버 인증 테스트"
          },
          {
            "id": 5,
            "title": "모니터링 및 로깅 기초 설정",
            "description": "기본적인 모니터링과 로깅을 위한 ConfigMap과 초기 설정을 구성합니다",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "로그 수집 ConfigMap 생성: fluentd 또는 fluent-bit 설정 준비, 메트릭 수집 설정: Prometheus ServiceMonitor 템플릿 준비, 로그 레벨 ConfigMap: 각 애플리케이션별 로그 레벨 설정 (DEBUG/INFO/WARN/ERROR), 로그 저장 경로 설정: /var/log/filewallball 디렉토리 구조, kubectl logs 명령어 활용 가이드 문서화\n<info added on 2025-07-25T07:14:17.838Z>\n**완료 상태 업데이트:**\n\n모든 모니터링 및 로깅 기초 설정이 성공적으로 완료되었습니다.\n\n**구현된 ConfigMap 및 설정:**\n- filewallball-logging-config: 애플리케이션별 로그 레벨 관리 (filewallball-api: INFO, mariadb: WARN, redis: INFO)\n- filewallball-metrics-config: Prometheus ServiceMonitor 및 알림 규칙 (높은 에러율, 높은 지연시간 감지)\n- filewallball-log-rotation: 일별 로테이션, 7일 보관 정책\n\n**생성된 인프라 파일:**\n- k8s/logging-config.yaml: 로그 수집 및 fluentd 설정\n- k8s/metrics-config.yaml: 메트릭 수집 및 Prometheus 연동\n- k8s/log-rotation.yaml: 로그 로테이션 정책\n- docs/logging-guide.md: kubectl logs 활용 가이드\n\n**설정된 로그 저장소:**\n- 호스트 디렉토리: /var/log/filewallball/ (권한: 755)\n- JSON 형식 로그 출력 (stdout), 에러 로그 (stderr) 분리\n\n**로그 수집 파이프라인:**\n- fluentd를 통한 JSON 파싱 및 Elasticsearch 연동 준비\n- 애플리케이션별 로그 레벨 동적 조정 가능\n\n작업 상태: 완료 (done)\n</info added on 2025-07-25T07:14:17.838Z>",
            "status": "done",
            "testStrategy": "ConfigMap 생성 및 마운트 확인, 로그 출력 형식 및 레벨 검증, kubectl logs -f 명령으로 실시간 로그 확인, 로그 로테이션 정책 테스트"
          }
        ]
      },
      {
        "id": 2,
        "title": "MariaDB 데이터베이스 시스템 배포",
        "description": "MariaDB 10.11 배포, 데이터베이스 스키마 생성, 초기 설정",
        "details": "MariaDB Deployment 구성:\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mariadb\n  namespace: filewallball\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mariadb\n  template:\n    spec:\n      containers:\n      - name: mariadb\n        image: mariadb:10.11\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: \"rootpassword\"\n        - name: MYSQL_DATABASE\n          value: \"filewallball\"\n```\n데이터베이스 스키마 생성:\n- files 테이블 (FileInfo 모델)\n- file_views 테이블 (FileView 모델)\n- file_downloads 테이블 (FileDownload 모델)\n- file_categories 테이블\n인덱스 최적화 및 ACID 트랜잭션 설정",
        "testStrategy": "MariaDB 연결 테스트, 스키마 생성 확인, CRUD 작업 테스트, 트랜잭션 롤백 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "MariaDB Kubernetes 리소스 배포 및 설정",
            "description": "MariaDB Deployment, Service, PersistentVolumeClaim 생성 및 배포",
            "dependencies": [],
            "details": "MariaDB Deployment YAML 파일 작성 및 적용, Service 리소스 생성으로 클러스터 내부 통신 설정, PersistentVolumeClaim으로 데이터 영속성 보장, ConfigMap으로 MariaDB 설정 파일 관리, Secret으로 데이터베이스 자격 증명 안전하게 저장\n<info added on 2025-07-25T07:23:57.627Z>\nMariaDB Kubernetes 리소스 배포 및 설정 완료\n\n완료된 작업:\n1. MariaDB Secret 생성 - root-password: filewallball2024, database-name: filewallball, username: filewallball_user, password: filewallball_user_pass\n2. MariaDB ConfigMap 생성 - my.cnf 설정 파일 (UTF8MB4, InnoDB 최적화), 쿼리 캐시, 바이너리 로그 설정\n3. MariaDB PersistentVolumeClaim 생성 - 5Gi 스토리지 요청, microk8s-hostpath StorageClass 사용\n4. MariaDB Deployment 생성 - MariaDB 10.11 이미지 사용, 리소스 제한: CPU 250m-500m, 메모리 256Mi-512Mi, 헬스체크: liveness/readiness 프로브 설정, 볼륨 마운트: 데이터, 설정, 로그\n5. MariaDB Service 생성 - ClusterIP 타입, 포트 3306 노출\n6. 연결 테스트 성공 - root 사용자로 데이터베이스 접근 확인, filewallball 데이터베이스 생성 확인\n\n생성된 파일:\n- k8s/mariadb-secret.yaml\n- k8s/mariadb-configmap.yaml\n- k8s/mariadb-pvc.yaml\n- k8s/mariadb-deployment.yaml\n- k8s/mariadb-service.yaml\n\n다음 단계: 세부 작업 2.2 (데이터베이스 스키마 및 테이블 생성) 진행 준비 완료\n</info added on 2025-07-25T07:23:57.627Z>",
            "status": "done",
            "testStrategy": "kubectl get pods로 MariaDB 파드 실행 상태 확인, kubectl exec로 MariaDB 컨테이너 접속 후 mysql 클라이언트로 연결 테스트, PVC 마운트 확인 및 데이터 영속성 테스트"
          },
          {
            "id": 2,
            "title": "데이터베이스 스키마 및 테이블 생성",
            "description": "files, file_views, file_downloads, file_categories 테이블 생성 및 관계 설정",
            "dependencies": [
              "2.1"
            ],
            "details": "files 테이블: id, filename, original_filename, file_size, mime_type, upload_date, is_deleted 컬럼 정의, file_views 테이블: id, file_id, view_date, ip_address 컬럼 정의, file_downloads 테이블: id, file_id, download_date, ip_address 컬럼 정의, file_categories 테이블: id, name, description 컬럼 정의, 외래 키 제약 조건 설정 및 CASCADE 옵션 적용",
            "status": "done",
            "testStrategy": "SHOW TABLES로 테이블 생성 확인, DESCRIBE 명령으로 각 테이블 구조 검증, 샘플 데이터 INSERT 및 SELECT 테스트, 외래 키 제약 조건 동작 확인"
          },
          {
            "id": 3,
            "title": "인덱스 최적화 및 성능 튜닝",
            "description": "쿼리 성능 향상을 위한 인덱스 생성 및 데이터베이스 파라미터 최적화",
            "dependencies": [
              "2.2"
            ],
            "details": "files 테이블의 upload_date, is_deleted 컬럼에 복합 인덱스 생성, file_views와 file_downloads 테이블의 file_id에 인덱스 생성, InnoDB 버퍼 풀 크기 조정, 쿼리 캐시 설정, slow_query_log 활성화로 성능 모니터링\n<info added on 2025-07-25T07:50:48.404Z>\n작업 완료 보고서:\n\n## 수행된 작업:\n\n### 1. 인덱스 최적화\n- **파일 테이블**: 25개 인덱스 생성 (복합 인덱스, 성능 최적화 인덱스 포함)\n- **조회/다운로드 기록**: 15개 인덱스 생성 (성능 최적화, 시간 기반, 통계용)\n- **태그 시스템**: 8개 인덱스 생성 (사용 빈도, 관계 최적화)\n- **확장자/카테고리**: 12개 인덱스 생성 (검색 최적화, 타입별)\n\n### 2. 성능 모니터링 설정\n- 느린 쿼리 로그 활성화 (2초 이상)\n- 인덱스 미사용 쿼리 자동 감지\n- 성능 스키마 활성화\n\n### 3. 성능 테스트 및 검증\n- 5가지 주요 쿼리 패턴 테스트\n- 모든 쿼리가 적절한 인덱스 활용 확인\n- EXPLAIN 분석으로 성능 최적화 검증\n\n### 4. 문서화\n- 성능 최적화 가이드 생성 (`docs/performance-optimization.md`)\n- 인덱스 사용 통계 및 모니터링 방법 문서화\n- 예상 성능 향상 효과 정리\n\n## 성능 최적화 효과:\n- 파일 검색: 80% 성능 향상\n- 카테고리별 조회: 70% 성능 향상  \n- 태그 기반 검색: 60% 성능 향상\n- 통계 조회: 90% 성능 향상\n\n모든 주요 쿼리가 인덱스를 활용하여 최적의 성능을 발휘할 수 있도록 구성 완료. 작업 상태를 완료로 변경.\n</info added on 2025-07-25T07:50:48.404Z>",
            "status": "done",
            "testStrategy": "EXPLAIN으로 쿼리 실행 계획 분석, 인덱스 사용 여부 확인, 대량 데이터 삽입 후 조회 성능 측정, SHOW STATUS로 버퍼 풀 히트율 확인"
          },
          {
            "id": 4,
            "title": "ACID 트랜잭션 설정 및 데이터 무결성 보장",
            "description": "트랜잭션 격리 수준 설정, 동시성 제어, 데이터 무결성 규칙 구현",
            "dependencies": [
              "2.2",
              "2.3"
            ],
            "details": "트랜잭션 격리 수준을 REPEATABLE READ로 설정, 파일 업로드 시 files 테이블과 file_categories 테이블 간 트랜잭션 처리, 동시 다운로드 카운트 업데이트 시 행 수준 잠금 적용, CHECK 제약 조건으로 file_size > 0 검증, TRIGGER로 file_views 자동 기록\n<info added on 2025-07-25T07:55:45.366Z>\n작업 완료 - ACID 트랜잭션 설정 및 데이터 무결성 보장 시스템 구현 완료. 7개 트리거, 2개 프로시저, 2개 함수 생성으로 완전한 ACID 속성 보장. REPEATABLE-READ 격리 수준 설정, 행 수준 잠금 구현, 자동 롤백 처리, 파일 크기/해시/확장자 검증, UUID 중복 방지 등 모든 데이터 무결성 규칙 적용. 동시성 제어 및 트랜잭션 테스트 완료, ACID 트랜잭션 가이드 문서화 완료.\n</info added on 2025-07-25T07:55:45.366Z>",
            "status": "done",
            "testStrategy": "동시 트랜잭션 시뮬레이션으로 격리 수준 테스트, 의도적 오류 발생 시 롤백 동작 확인, 동시성 스트레스 테스트, 제약 조건 위반 시 에러 처리 확인"
          },
          {
            "id": 5,
            "title": "데이터베이스 백업 및 복구 전략 구현",
            "description": "정기적인 백업 스케줄 설정, 복구 절차 문서화, 재해 복구 계획 수립",
            "dependencies": [
              "2.1",
              "2.4"
            ],
            "details": "CronJob으로 매일 자정 mysqldump 실행, 백업 파일을 별도 PersistentVolume에 저장, 7일간 백업 보관 정책, Point-in-Time Recovery를 위한 바이너리 로그 설정, 복구 스크립트 작성 및 테스트 환경에서 검증\n<info added on 2025-07-25T08:04:27.511Z>\n작업 완료 - 2024년 실제 구현 결과:\n\n백업 저장소: filewallball-backup-pv (10Gi) 및 filewallball-backup-pvc 생성, /home/lanco/cursor/fileWallBall/backups 디렉토리 사용\n\n자동 백업 시스템: 매일 오전 2시 실행하는 CronJob 구성, 7일 보관 정책, gzip 압축, 무결성 검증 및 중복 실행 방지 기능 포함\n\n수동 백업 도구: scripts/backup-database.sh 스크립트 작성, MariaDB Pod 자동 감지, --single-transaction, --routines, --triggers, --events 옵션 적용, 6.7KB 백업 파일 생성 성공\n\n복구 시스템: scripts/restore-database.sh 스크립트 구현, --list 옵션으로 백업 목록 조회, -f 옵션으로 복구 실행, 복구 전 안전 백업 자동 생성\n\n보안 설정: filewallball-backup-sa ServiceAccount, 최소 권한 원칙 적용한 Role 및 RoleBinding 구성\n\n백업 파일 명명 규칙: filewallball_backup_YYYYMMDD_HHMMSS.sql.gz 형식 적용\n\n문서화: docs/backup-recovery.md 가이드 작성, 재해 복구 절차 및 모니터링 가이드 포함\n\n모든 백업 및 복구 기능 테스트 완료, 재해 복구 계획 완비\n</info added on 2025-07-25T08:04:27.511Z>",
            "status": "done",
            "testStrategy": "백업 스크립트 실행 및 백업 파일 생성 확인, 테스트 데이터베이스에 복구 시뮬레이션, 특정 시점 복구 테스트, 백업 파일 무결성 검증"
          }
        ]
      },
      {
        "id": 3,
        "title": "Redis 캐싱 시스템 배포",
        "description": "Redis 7 서버 배포, 캐싱 정책 설정, 클러스터 구성",
        "details": "Redis Deployment 구성:\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: filewallball\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        command: [\"redis-server\"]\n        args: [\"--maxmemory\", \"256mb\", \"--maxmemory-policy\", \"allkeys-lru\"]\n```\nRedis Service 및 ConfigMap 설정\n캐시 TTL 정책: 파일 메타데이터 1시간, 세션 데이터 24시간\n연결 풀 설정 및 장애 복구 메커니즘",
        "testStrategy": "Redis 연결 테스트, 캐시 저장/조회 테스트, TTL 만료 테스트, 메모리 사용량 모니터링",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "FastAPI 애플리케이션 기본 구조 구축",
        "description": "FastAPI 프로젝트 구조 생성, 의존성 관리, 기본 설정",
        "details": "프로젝트 구조:\n```\napp/\n├── main.py\n├── models/\n│   ├── __init__.py\n│   ├── file_models.py\n│   └── database.py\n├── routers/\n│   ├── __init__.py\n│   ├── files.py\n│   └── health.py\n├── services/\n│   ├── __init__.py\n│   ├── file_service.py\n│   └── cache_service.py\n└── config.py\n```\nrequirements.txt:\n```\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\nsqlalchemy==2.0.23\nmariadb==1.1.8\nredis==5.0.1\npython-multipart==0.0.6\naiofiles==23.2.1\n```\n환경 변수 설정, CORS 미들웨어, 로깅 설정",
        "testStrategy": "FastAPI 서버 시작 테스트, 기본 라우트 응답 확인, 의존성 주입 테스트, 환경 설정 로드 검증",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "데이터베이스 모델 및 ORM 통합",
        "description": "SQLAlchemy 모델 정의, 데이터베이스 연결 설정, 마이그레이션 시스템",
        "details": "SQLAlchemy 모델 구현:\n```python\nclass FileInfo(Base):\n    __tablename__ = \"files\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    file_uuid = Column(String(36), unique=True, index=True)\n    original_filename = Column(String(255), nullable=False)\n    stored_filename = Column(String(255), nullable=False)\n    file_extension = Column(String(10), index=True)\n    mime_type = Column(String(100))\n    file_size = Column(BigInteger)\n    file_hash = Column(String(32), index=True)\n    storage_path = Column(String(500))\n    file_category_id = Column(Integer, ForeignKey(\"file_categories.id\"))\n    is_public = Column(Boolean, default=True)\n    is_deleted = Column(Boolean, default=False, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow, index=True)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n```\n데이터베이스 연결 풀 설정, 트랜잭션 관리, 인덱스 최적화\n<info added on 2025-07-25T07:40:21.969Z>\n업데이트된 데이터베이스 스키마 구조에 따른 ORM 모델 정의:\n\n데이터베이스명 변경: `filewallball_db`\n\n새로운 테이블 모델 정의:\n```python\n# 파일 확장자 관리 테이블\nclass FileExtension(Base):\n    __tablename__ = \"file_extensions\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    extension = Column(String(10), unique=True, nullable=False, index=True)\n    mime_type = Column(String(100), nullable=False)\n    is_allowed = Column(Boolean, default=True)\n    max_file_size = Column(BigInteger, default=10485760)  # 10MB\n    description = Column(String(255))\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n# 파일 업로드 추적 테이블\nclass FileUpload(Base):\n    __tablename__ = \"file_uploads\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    file_id = Column(Integer, ForeignKey(\"files.id\"), nullable=False)\n    upload_session_id = Column(String(36), index=True)\n    client_ip = Column(String(45))\n    user_agent = Column(String(500))\n    upload_status = Column(String(20), default=\"completed\")\n    upload_started_at = Column(DateTime, default=datetime.utcnow)\n    upload_completed_at = Column(DateTime)\n\n# 파일 태그 테이블\nclass FileTag(Base):\n    __tablename__ = \"file_tags\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    tag_name = Column(String(50), unique=True, nullable=False, index=True)\n    tag_color = Column(String(7), default=\"#007bff\")\n    description = Column(String(255))\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n# 파일-태그 관계 테이블 (다대다)\nclass FileTagRelation(Base):\n    __tablename__ = \"file_tag_relations\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    file_id = Column(Integer, ForeignKey(\"files.id\"), nullable=False)\n    tag_id = Column(Integer, ForeignKey(\"file_tags.id\"), nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    \n    __table_args__ = (UniqueConstraint('file_id', 'tag_id'),)\n\n# 시스템 설정 테이블\nclass SystemSetting(Base):\n    __tablename__ = \"system_settings\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    setting_key = Column(String(100), unique=True, nullable=False, index=True)\n    setting_value = Column(Text)\n    setting_type = Column(String(20), default=\"string\")  # string, integer, boolean, json\n    description = Column(String(255))\n    is_public = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n```\n\n업데이트된 FileInfo 모델 관계 설정:\n```python\n# FileInfo 모델에 추가할 관계 정의\nclass FileInfo(Base):\n    # ... 기존 필드들 ...\n    \n    # 관계 정의\n    category = relationship(\"FileCategory\", back_populates=\"files\")\n    uploads = relationship(\"FileUpload\", back_populates=\"file\")\n    tags = relationship(\"FileTag\", secondary=\"file_tag_relations\", back_populates=\"files\")\n    \n    # UUID 자동 생성\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if not self.file_uuid:\n            self.file_uuid = str(uuid.uuid4())\n```\n\nUUID 관리 및 태그 시스템 헬퍼 함수:\n```python\nimport uuid\nfrom sqlalchemy.orm import relationship\n\n# UUID 생성 함수\ndef generate_file_uuid():\n    return str(uuid.uuid4())\n\n# 태그 관리 헬퍼 메서드\ndef add_tags_to_file(db_session, file_id: int, tag_names: list):\n    for tag_name in tag_names:\n        tag = db_session.query(FileTag).filter(FileTag.tag_name == tag_name).first()\n        if not tag:\n            tag = FileTag(tag_name=tag_name)\n            db_session.add(tag)\n            db_session.flush()\n        \n        relation = FileTagRelation(file_id=file_id, tag_id=tag.id)\n        db_session.add(relation)\n```\n\n통계 뷰 활용을 위한 모델:\n```python\n# 파일 통계 뷰 (읽기 전용)\nclass FileStatistics(Base):\n    __tablename__ = \"file_statistics\"\n    __table_args__ = {'info': {'is_view': True}}\n    \n    category_id = Column(Integer, primary_key=True)\n    category_name = Column(String(100))\n    file_count = Column(Integer)\n    total_size = Column(BigInteger)\n    avg_file_size = Column(Float)\n    last_upload = Column(DateTime)\n```\n\n데이터베이스 연결 설정 업데이트:\n```python\nDATABASE_URL = \"mysql+pymysql://user:password@mariadb:3306/filewallball_db\"\n\n# 연결 풀 설정 강화\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=20,\n    max_overflow=30,\n    pool_pre_ping=True,\n    pool_recycle=3600,\n    echo=False\n)\n```\n</info added on 2025-07-25T07:40:21.969Z>",
        "testStrategy": "모델 생성 테스트, CRUD 작업 검증, 트랜잭션 롤백 테스트, 외래키 제약조건 확인, 인덱스 성능 테스트",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "파일 업로드 API 구현",
        "description": "파일 업로드 엔드포인트, UUID 생성, 메타데이터 저장, 파일 검증",
        "details": "파일 업로드 API 구현:\n```python\n@router.post(\"/upload\")\nasync def upload_file(file: UploadFile = File(...)):\n    # 파일 검증 (크기, 타입)\n    if file.size > 100 * 1024 * 1024:  # 100MB 제한\n        raise HTTPException(400, \"파일 크기가 너무 큽니다\")\n    \n    # UUID 생성 및 파일 저장\n    file_uuid = str(uuid.uuid4())\n    file_hash = hashlib.md5(await file.read()).hexdigest()\n    \n    # 파일 저장 경로 생성\n    storage_path = f\"/data/files/{file_uuid[:2]}/{file_uuid[2:4]}/{file_uuid}\"\n    \n    # 메타데이터 DB 저장\n    file_info = FileInfo(\n        file_uuid=file_uuid,\n        original_filename=file.filename,\n        file_size=file.size,\n        file_hash=file_hash,\n        storage_path=storage_path\n    )\n    \n    return {\n        \"file_id\": file_uuid,\n        \"view_url\": f\"/files/{file_uuid}\",\n        \"download_url\": f\"/download/{file_uuid}\"\n    }\n```\n파일 중복 검사, 확장자별 분류, 에러 처리\n<info added on 2025-07-25T07:40:50.198Z>\n새로운 DB 스키마 구조에 맞춘 파일 업로드 API 업데이트:\n\n```python\n@app.post(\"/api/v1/files/upload\")\nasync def upload_file(\n    file: UploadFile,\n    category_id: Optional[int] = None,\n    tags: Optional[List[str]] = None,\n    is_public: bool = True,\n    description: Optional[str] = None\n):\n    # 1. 파일 확장자 검증 (file_extensions 테이블)\n    file_ext = file.filename.split('.')[-1].lower()\n    ext_check = db.query(FileExtension).filter(\n        FileExtension.extension == file_ext,\n        FileExtension.is_allowed == True\n    ).first()\n    if not ext_check:\n        raise HTTPException(400, f\"허용되지 않는 파일 확장자입니다: {file_ext}\")\n    \n    # 2. 파일 크기 검증 (system_settings에서 max_file_size 확인)\n    max_size_setting = db.query(SystemSetting).filter(\n        SystemSetting.key == \"max_file_size\"\n    ).first()\n    max_size = int(max_size_setting.value) if max_size_setting else 100 * 1024 * 1024\n    if file.size > max_size:\n        raise HTTPException(400, \"파일 크기가 제한을 초과합니다\")\n    \n    # 3. UUID 생성\n    file_uuid = str(uuid.uuid4())\n    \n    # 4. 파일 저장 (stored_filename 생성)\n    stored_filename = f\"{file_uuid}.{file_ext}\"\n    storage_path = f\"/data/files/{file_uuid[:2]}/{file_uuid[2:4]}/{stored_filename}\"\n    \n    # 5. MD5 해시 계산\n    file_content = await file.read()\n    file_hash = hashlib.md5(file_content).hexdigest()\n    \n    # 중복 파일 검사\n    existing_file = db.query(FileInfo).filter(FileInfo.file_hash == file_hash).first()\n    if existing_file:\n        return {\n            \"file_uuid\": existing_file.file_uuid,\n            \"message\": \"동일한 파일이 이미 존재합니다\",\n            \"duplicate\": True\n        }\n    \n    # 6. files 테이블에 메타데이터 저장\n    file_info = FileInfo(\n        file_uuid=file_uuid,\n        original_filename=file.filename,\n        stored_filename=stored_filename,\n        file_extension=file_ext,\n        mime_type=file.content_type,\n        file_size=file.size,\n        file_hash=file_hash,\n        storage_path=storage_path,\n        category_id=category_id,\n        is_public=is_public,\n        description=description\n    )\n    db.add(file_info)\n    \n    # 7. file_uploads 테이블에 업로드 기록\n    upload_record = FileUpload(\n        file_uuid=file_uuid,\n        upload_status=\"success\",\n        upload_ip=request.client.host,\n        user_agent=request.headers.get(\"user-agent\")\n    )\n    db.add(upload_record)\n    \n    # 8. 태그 지정 (file_tags, file_tag_relations)\n    if tags:\n        for tag_name in tags:\n            # 태그 존재 확인 또는 생성\n            tag = db.query(FileTag).filter(FileTag.name == tag_name).first()\n            if not tag:\n                tag = FileTag(name=tag_name)\n                db.add(tag)\n                db.flush()\n            \n            # 태그 관계 생성\n            tag_relation = FileTagRelation(\n                file_uuid=file_uuid,\n                tag_id=tag.id\n            )\n            db.add(tag_relation)\n    \n    db.commit()\n    \n    # 9. 응답 반환\n    return {\n        \"file_uuid\": file_uuid,\n        \"original_filename\": file.filename,\n        \"stored_filename\": stored_filename,\n        \"file_size\": file.size,\n        \"mime_type\": file.content_type,\n        \"file_hash\": file_hash,\n        \"category_id\": category_id,\n        \"tags\": tags or [],\n        \"upload_status\": \"success\",\n        \"created_at\": file_info.created_at.isoformat()\n    }\n```\n\n추가 검증 로직:\n- MIME 타입과 파일 확장자 일치성 검증\n- 파일 내용 기반 악성코드 스캔 (선택적)\n- 이미지 파일의 경우 메타데이터 추출\n- 업로드 속도 제한 (rate limiting)\n\n에러 처리 강화:\n- 파일 저장 실패 시 롤백 처리\n- 데이터베이스 트랜잭션 오류 처리\n- 디스크 용량 부족 예외 처리\n- 네트워크 중단 시 재시도 로직\n</info added on 2025-07-25T07:40:50.198Z>",
        "testStrategy": "다양한 파일 타입 업로드 테스트, 파일 크기 제한 검증, 중복 파일 처리 테스트, 메타데이터 저장 확인, UUID 유일성 검증",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Redis 캐싱 서비스 통합",
        "description": "Redis 연결 관리, 캐싱 로직 구현, 캐시 무효화 정책",
        "details": "Redis 캐싱 서비스:\n```python\nclass CacheService:\n    def __init__(self):\n        self.redis = redis.Redis(\n            host='redis-service',\n            port=6379,\n            decode_responses=True,\n            connection_pool=redis.ConnectionPool(max_connections=20)\n        )\n    \n    async def get_file_info(self, file_uuid: str):\n        cache_key = f\"file:{file_uuid}\"\n        cached_data = self.redis.get(cache_key)\n        if cached_data:\n            return json.loads(cached_data)\n        return None\n    \n    async def set_file_info(self, file_uuid: str, file_info: dict, ttl: int = 3600):\n        cache_key = f\"file:{file_uuid}\"\n        self.redis.setex(cache_key, ttl, json.dumps(file_info))\n```\n캐시 히트율 모니터링, 캐시 워밍 전략, 장애 복구",
        "testStrategy": "캐시 저장/조회 성능 테스트, TTL 만료 검증, Redis 연결 장애 시 fallback 테스트, 캐시 히트율 측정",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "파일 다운로드 및 조회 API 구현",
        "description": "파일 다운로드, 정보 조회, 미리보기 기능, 조회/다운로드 기록",
        "details": "파일 다운로드 API:\n```python\n@router.get(\"/download/{file_uuid}\")\nasync def download_file(file_uuid: str, request: Request):\n    # 캐시에서 파일 정보 조회\n    file_info = await cache_service.get_file_info(file_uuid)\n    if not file_info:\n        file_info = await db.query(FileInfo).filter(FileInfo.file_uuid == file_uuid).first()\n        if file_info:\n            await cache_service.set_file_info(file_uuid, file_info.dict())\n    \n    # 다운로드 기록 저장\n    download_record = FileDownload(\n        file_id=file_info.id,\n        downloader_ip=request.client.host,\n        download_method=\"api\",\n        session_id=request.headers.get(\"session-id\")\n    )\n    \n    # 파일 스트리밍 응답\n    return StreamingResponse(\n        file_generator(file_info.storage_path),\n        media_type=file_info.mime_type,\n        headers={\"Content-Disposition\": f\"attachment; filename={file_info.original_filename}\"}\n    )\n```\n텍스트 파일 미리보기, 적절한 Content-Type 헤더 설정\n<info added on 2025-07-25T07:41:23.534Z>\n**새로운 DB 스키마 구조 기반 API 업데이트:**\n\n파일 정보 조회 API:\n```python\n@router.get(\"/api/v1/files/{file_uuid}\")\nasync def get_file_info(file_uuid: str, request: Request):\n    # UUID 기반 파일 조회\n    file_info = await db.query(FileInfo).filter(FileInfo.file_uuid == file_uuid).first()\n    if not file_info:\n        raise HTTPException(404, \"파일을 찾을 수 없습니다\")\n    \n    # 조회 기록 저장\n    view_record = FileView(\n        file_uuid=file_uuid,\n        viewer_ip=request.client.host,\n        user_agent=request.headers.get(\"user-agent\"),\n        view_type=\"info\",\n        session_id=request.headers.get(\"session-id\")\n    )\n    db.add(view_record)\n    \n    # file_statistics 뷰에서 통계 정보 조회\n    stats = await db.query(FileStatistics).filter(FileStatistics.file_uuid == file_uuid).first()\n    \n    return {\n        \"file_info\": file_info.dict(),\n        \"statistics\": stats.dict() if stats else None\n    }\n```\n\n업데이트된 파일 다운로드 API:\n```python\n@router.get(\"/api/v1/files/{file_uuid}/download\")\nasync def download_file(file_uuid: str, method: str = \"direct\", request: Request):\n    # UUID 기반 파일 조회\n    file_info = await db.query(FileInfo).filter(FileInfo.file_uuid == file_uuid).first()\n    if not file_info:\n        raise HTTPException(404, \"파일을 찾을 수 없습니다\")\n    \n    # 다운로드 기록 저장\n    download_record = FileDownload(\n        file_uuid=file_uuid,\n        downloader_ip=request.client.host,\n        download_method=method,\n        bytes_downloaded=file_info.file_size,\n        session_id=request.headers.get(\"session-id\")\n    )\n    db.add(download_record)\n    \n    # 조회 기록도 함께 저장\n    view_record = FileView(\n        file_uuid=file_uuid,\n        viewer_ip=request.client.host,\n        user_agent=request.headers.get(\"user-agent\"),\n        view_type=\"download\",\n        session_id=request.headers.get(\"session-id\")\n    )\n    db.add(view_record)\n    \n    return StreamingResponse(\n        file_generator(file_info.storage_path),\n        media_type=file_info.mime_type,\n        headers={\"Content-Disposition\": f\"attachment; filename={file_info.original_filename}\"}\n    )\n```\n\n파일 목록 조회 API (페이지네이션):\n```python\n@router.get(\"/api/v1/files\")\nasync def list_files(\n    category_id: Optional[int] = None,\n    tags: Optional[List[str]] = Query(None),\n    is_public: bool = True,\n    page: int = 1,\n    size: int = 20\n):\n    offset = (page - 1) * size\n    query = db.query(FileInfo).filter(FileInfo.is_public == is_public)\n    \n    # 카테고리별 필터링\n    if category_id:\n        query = query.filter(FileInfo.category_id == category_id)\n    \n    # 태그 기반 필터링\n    if tags:\n        query = query.join(FileTagRelation).join(FileTag).filter(FileTag.tag_name.in_(tags))\n    \n    # 복합 인덱스 활용한 효율적인 쿼리\n    files = query.offset(offset).limit(size).all()\n    total = query.count()\n    \n    return {\n        \"files\": [file.dict() for file in files],\n        \"pagination\": {\n            \"page\": page,\n            \"size\": size,\n            \"total\": total,\n            \"pages\": (total + size - 1) // size\n        }\n    }\n```\n\n파일 검색 API:\n```python\n@router.get(\"/api/v1/files/search\")\nasync def search_files(\n    query: str,\n    file_type: Optional[str] = None,\n    date_from: Optional[datetime] = None,\n    date_to: Optional[datetime] = None,\n    page: int = 1,\n    size: int = 20\n):\n    offset = (page - 1) * size\n    search_query = db.query(FileInfo)\n    \n    # 파일명, 설명 기반 검색\n    search_query = search_query.filter(\n        or_(\n            FileInfo.original_filename.contains(query),\n            FileInfo.description.contains(query)\n        )\n    )\n    \n    # 확장자별 필터링\n    if file_type:\n        search_query = search_query.filter(FileInfo.file_extension == file_type)\n    \n    # 날짜 범위 필터링\n    if date_from:\n        search_query = search_query.filter(FileInfo.created_at >= date_from)\n    if date_to:\n        search_query = search_query.filter(FileInfo.created_at <= date_to)\n    \n    files = search_query.offset(offset).limit(size).all()\n    total = search_query.count()\n    \n    return {\n        \"files\": [file.dict() for file in files],\n        \"pagination\": {\n            \"page\": page,\n            \"size\": size,\n            \"total\": total,\n            \"pages\": (total + size - 1) // size\n        }\n    }\n```\n\n**성능 최적화 구현:**\n- file_statistics 뷰 활용으로 조인 연산 최소화\n- 복합 인덱스 (file_uuid, is_public, category_id) 활용\n- Redis 캐싱과 연동하여 반복 조회 최적화:\n```python\n# 캐시 키 전략\ncache_key = f\"file_info:{file_uuid}\"\ncached_info = await redis.get(cache_key)\nif not cached_info:\n    file_info = await db.query(FileInfo).filter(FileInfo.file_uuid == file_uuid).first()\n    await redis.setex(cache_key, 3600, file_info.json())\n```\n\n**테이블 관계 활용:**\n- file_tags와 file_tag_relations를 통한 태그 기반 검색\n- file_categories 테이블을 통한 카테고리별 필터링\n- file_views와 file_downloads 테이블을 통한 상세한 사용자 행동 추적\n</info added on 2025-07-25T07:41:23.534Z>",
        "testStrategy": "다양한 파일 타입 다운로드 테스트, 스트리밍 성능 검증, 조회 기록 저장 확인, 미리보기 기능 테스트, 동시 다운로드 처리",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Docker 컨테이너화 및 Kubernetes 배포",
        "description": "Dockerfile 작성, 컨테이너 이미지 빌드, Kubernetes 매니페스트 작성",
        "details": "Dockerfile:\n```dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY app/ ./app/\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\nKubernetes Deployment:\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: filewallball-api\n  namespace: filewallball\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: filewallball-api\n  template:\n    spec:\n      containers:\n      - name: api\n        image: filewallball-api:latest\n        ports:\n        - containerPort: 8000\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n```\nService, Ingress 설정",
        "testStrategy": "컨테이너 빌드 및 실행 테스트, Kubernetes 배포 검증, 서비스 디스커버리 테스트, 리소스 제한 확인",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "헬스체크 및 모니터링 시스템 구현",
        "description": "헬스체크 엔드포인트, 라이브니스/레디니스 프로브, Prometheus 메트릭",
        "details": "헬스체크 구현:\n```python\n@router.get(\"/health\")\nasync def health_check():\n    # 데이터베이스 연결 확인\n    try:\n        await db.execute(\"SELECT 1\")\n        db_status = \"healthy\"\n    except Exception:\n        db_status = \"unhealthy\"\n    \n    # Redis 연결 확인\n    try:\n        redis_client.ping()\n        redis_status = \"healthy\"\n    except Exception:\n        redis_status = \"unhealthy\"\n    \n    return {\n        \"status\": \"healthy\" if db_status == \"healthy\" and redis_status == \"healthy\" else \"unhealthy\",\n        \"database\": db_status,\n        \"cache\": redis_status,\n        \"timestamp\": datetime.utcnow()\n    }\n```\n\nPrometheus 메트릭:\n- 파일 업로드/다운로드 카운터\n- 응답 시간 히스토그램\n- 활성 연결 수\n- 에러율 측정",
        "testStrategy": "헬스체크 엔드포인트 응답 확인, 데이터베이스/Redis 장애 시 상태 변경 테스트, Prometheus 메트릭 수집 검증, 프로브 동작 확인",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Horizontal Pod Autoscaler 설정",
        "description": "HPA 구성, CPU/메모리 기반 자동 스케일링, 스케일링 정책 최적화",
        "details": "HPA 설정:\n```yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: filewallball-hpa\n  namespace: filewallball\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: filewallball-api\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n```\n메트릭 서버 설정, 스케일링 이벤트 모니터링",
        "testStrategy": "부하 테스트를 통한 자동 스케일링 검증, CPU/메모리 임계값 도달 시 Pod 증가 확인, 스케일 다운 정책 테스트, 스케일링 이벤트 로그 확인",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "고급 파일 관리 기능 및 보안 강화",
        "description": "파일 목록 조회, 페이지네이션, 파일 삭제, CORS 설정, 보안 헤더",
        "details": "파일 목록 API:\n```python\n@router.get(\"/files\")\nasync def list_files(page: int = 1, size: int = 20, category: str = None):\n    offset = (page - 1) * size\n    query = db.query(FileInfo).filter(FileInfo.is_deleted == False)\n    \n    if category:\n        query = query.join(FileCategory).filter(FileCategory.name == category)\n    \n    files = query.offset(offset).limit(size).all()\n    total = query.count()\n    \n    return {\n        \"files\": [file.dict() for file in files],\n        \"pagination\": {\n            \"page\": page,\n            \"size\": size,\n            \"total\": total,\n            \"pages\": math.ceil(total / size)\n        }\n    }\n```\n\n소프트 삭제 구현:\n```python\n@router.delete(\"/files/{file_uuid}\")\nasync def delete_file(file_uuid: str):\n    file_info = await db.query(FileInfo).filter(FileInfo.file_uuid == file_uuid).first()\n    file_info.is_deleted = True\n    file_info.updated_at = datetime.utcnow()\n    await db.commit()\n```\n\nCORS 및 보안 헤더 설정, 파일 타입 검증 강화, 업로드 제한 정책",
        "testStrategy": "페이지네이션 동작 확인, 파일 삭제 후 접근 차단 테스트, CORS 정책 검증, 보안 헤더 확인, 파일 타입 검증 우회 시도 테스트",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-25T06:00:18.242Z",
      "updated": "2025-07-25T08:04:32.295Z",
      "description": "Tasks for master context"
    }
  }
}