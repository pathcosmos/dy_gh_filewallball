# Task ID: 25
# Title: Docker Compose 아키텍처 마이그레이션 및 볼륨 설정
# Status: done
# Dependencies: 9, 10, 11, 13
# Priority: medium
# Description: 현재 로컬 환경에서 실행 중인 FastAPI 애플리케이션과 MySQL 데이터베이스를 Docker 컨테이너로 마이그레이션하고, 파일 저장소 볼륨을 분리하여 개발/프로덕션 환경에서 일관된 배포가 가능하도록 합니다.
# Details:
1. 기존 Docker Compose 설정 검토 및 개선: 현재 docker-compose.yml 파일을 분석하여 FastAPI 애플리케이션과 MariaDB 컨테이너 설정을 최적화합니다. 2. 파일 저장소 볼륨 분리: uploads, logs, backups 디렉토리를 별도의 named volume으로 설정하여 데이터 영속성을 보장합니다. 3. 환경별 설정 분리: .env.development, .env.production 파일을 생성하여 환경별 설정을 관리합니다. 4. 네트워크 설정 최적화: 서비스 간 통신을 위한 내부 네트워크 설정을 개선하고 외부 노출 포트를 환경별로 구성합니다. 5. 헬스체크 및 의존성 관리: 각 서비스의 헬스체크 설정을 강화하고 depends_on 설정을 통해 시작 순서를 보장합니다. 6. 백업 및 복구 전략: 데이터베이스와 파일 저장소의 백업/복구 스크립트를 Docker 환경에 맞게 수정합니다. 7. 로그 관리: 각 서비스의 로그를 중앙화하고 로테이션 정책을 설정합니다.

# Test Strategy:
1. docker-compose config 명령으로 설정 파일 유효성 검증을 수행합니다. 2. docker-compose up -d로 전체 스택을 시작하고 모든 서비스가 정상적으로 실행되는지 확인합니다. 3. 볼륨 마운트 테스트: 파일 업로드 후 컨테이너 재시작 시에도 데이터가 유지되는지 검증합니다. 4. 환경별 배포 테스트: development와 production 환경에서 각각 배포하여 설정이 올바르게 적용되는지 확인합니다. 5. 서비스 간 통신 테스트: API에서 데이터베이스 연결, Redis 캐시 연결이 정상적으로 작동하는지 검증합니다. 6. 백업/복구 테스트: 데이터베이스 백업 생성 및 복구 과정을 테스트합니다. 7. 성능 테스트: 기존 로컬 환경 대비 Docker 환경에서의 성능 차이를 측정하고 최적화합니다.

# Subtasks:
## 1. Docker Compose 설정 파일 최적화 및 환경별 분리 [done]
### Dependencies: None
### Description: 기존 docker-compose.yml 파일을 분석하여 FastAPI와 MariaDB 설정을 최적화하고, development와 production 환경을 위한 별도의 compose 파일과 환경변수 파일을 생성합니다.
### Details:
docker-compose.yml, docker-compose.dev.yml, docker-compose.prod.yml 파일 구성. .env.development, .env.production 환경변수 파일 생성. 각 환경별 포트, 리소스 제한, 보안 설정 분리. 기존 Task 9와 13의 설정을 기반으로 개선된 구성 적용.
<info added on 2025-08-24T12:40:40.112Z>
Docker Compose 설정 파일 최적화 및 환경별 분리 작업이 성공적으로 완료되었습니다. Dockerfile 생성, 기본 및 환경별 docker-compose 파일 구성, 데이터베이스 초기화 스크립트, Nginx 설정, 백업 스크립트 구현이 모두 완료되었으며, 설정 유효성 검증과 개발 환경 테스트를 통해 정상 작동을 확인했습니다. FastAPI 애플리케이션 헬스체크와 파일 업로드/목록 조회 API가 정상 작동하고 Named Volume 마운트가 확인되어 다음 단계인 Named Volume 설정 및 파일 저장소 분리 작업을 진행할 준비가 완료되었습니다.
</info added on 2025-08-24T12:40:40.112Z>

## 2. Named Volume 설정 및 파일 저장소 분리 [done]
### Dependencies: 25.1
### Description: uploads, logs, backups 디렉토리를 Docker named volume으로 분리하여 데이터 영속성을 보장하고, 컨테이너 재시작 시에도 데이터가 유지되도록 설정합니다.
### Details:
uploads_data, logs_data, backups_data named volume 생성. 각 볼륨의 마운트 포인트 설정 및 권한 관리. 볼륨 백업 전략 수립. 기존 로컬 데이터의 볼륨 마이그레이션 스크립트 작성.
<info added on 2025-08-24T12:57:25.538Z>
작업 완료 상태 업데이트:

**Named Volume 시스템 구축 완료**:
- 6개 Named Volume 생성 및 검증 완료 (uploads_data, logs_data, backups_data, mariadb_data, mariadb_backups, redis_data)
- Docker Compose 자동 볼륨 관리 및 마운트 포인트 설정 완료
- 컨테이너 재시작 후 데이터 영속성 테스트 성공

**볼륨 백업/복구 시스템 완료**:
- backup-volumes.sh 스크립트로 전체 볼륨 자동 백업 구현 (총 201MB+ 백업 완료)
- restore-volumes.sh 스크립트로 개별/전체 볼륨 복구 기능 구현
- 7일 보존 정책 및 자동 정리 시스템 적용
- uploads_dev_data 볼륨 복구 테스트 성공 (138개 파일, 17개 디렉토리)

**파일 저장소 분리 및 API 연동 완료**:
- 파일 업로드/목록 조회 API 정상 작동 확인
- 볼륨 마운트 상태 및 권한 검증 완료
- 백업 파일 크기 및 메타데이터 관리 시스템 구축

작업 상태: 완료. 다음 단계인 네트워크 설정 최적화 및 보안 강화(Subtask 25.3) 진행 준비 완료.
</info added on 2025-08-24T12:57:25.538Z>

## 3. 네트워크 설정 최적화 및 보안 강화 [done]
### Dependencies: 25.1
### Description: 서비스 간 내부 통신을 위한 커스텀 네트워크를 구성하고, 외부 노출 포트를 환경별로 분리하여 보안을 강화합니다.
### Details:
app-network 커스텀 브리지 네트워크 생성. 내부 서비스 간 통신은 서비스명으로 DNS 해석. 외부 노출 포트는 환경변수로 관리. 불필요한 포트 노출 제거 및 방화벽 규칙 적용.
<info added on 2025-08-24T13:06:13.608Z>
컨테이너 보안 강화 완료: no-new-privileges 설정으로 권한 상승 방지, 서비스별 read_only 파일시스템 적용(MariaDB/FastAPI: false, Nginx/Adminer: true), tmpfs를 통한 임시 디렉토리 메모리 기반 설정. 커스텀 브리지 네트워크 172.20.0.0/16 서브넷 구성으로 컨테이너 간 통신 격리. 모든 환경(기본/개발/프로덕션)에 보안 설정 적용 완료. 컨테이너 재시작 후 보안 설정 유지 및 애플리케이션 정상 작동 검증 완료.
</info added on 2025-08-24T13:06:13.608Z>

## 4. 헬스체크 강화 및 서비스 의존성 관리 [done]
### Dependencies: 25.2, 25.3
### Description: 각 서비스의 헬스체크 설정을 강화하고 depends_on과 healthcheck를 조합하여 서비스 시작 순서와 준비 상태를 보장합니다.
### Details:
MariaDB, Redis, FastAPI 각각의 상세한 헬스체크 설정. depends_on에 condition: service_healthy 추가. 헬스체크 실패 시 재시작 정책 설정. 서비스 준비 완료까지의 타임아웃 설정.
<info added on 2025-08-24T13:25:11.717Z>
헬스체크 스크립트 생성 완료 (scripts/health-check.sh): MariaDB, FastAPI, Redis, Nginx 서비스별 헬스체크, 시스템 리소스 모니터링, 컬러 출력 및 상세 로깅, 서비스별 개별 헬스체크 지원. 로그 모니터링 스크립트 생성 완료 (scripts/log-monitor.sh): 실시간 컨테이너 로그 모니터링, 에러/경고 메시지 자동 감지 및 하이라이트, 로그 파일 분석, 7일 보존 정책의 로그 로테이션 및 자동 정리, 로그 통계 및 크기 모니터링. 서비스 매니저 스크립트 생성 완료 (scripts/service-manager.sh): 서비스 의존성 기반 순차적 시작/중지, 헬스체크 기반 서비스 상태 대기, 개발/프로덕션 환경별 서비스 관리, 서비스 로그 조회 및 상태 모니터링. Docker Compose 헬스체크 강화: MariaDB (mysqladmin ping, 30s 간격, 5회 재시도), FastAPI (curl /health, 30s 간격, 3회 재시도), Nginx (wget /health, 30s 간격, 3회 재시도), Redis (redis-cli ping, 30s 간격, 3회 재시도), Adminer (wget 포트 접근, 30s 간격, 3회 재시도), Backup Service (ps aux 프로세스, 60s 간격, 2회 재시도). 서비스 의존성 관리 구현: MariaDB → FastAPI App → Nginx 순서 시작, Redis 독립적 시작 (MariaDB와 병렬), Adminer MariaDB 의존성 확인 후 시작, 각 서비스 시작 전 의존 서비스 헬스체크 대기. 테스트 완료: 서비스 매니저 스크립트 순차적 시작 성공, 모든 서비스 헬스체크 통과, FastAPI 애플리케이션 정상 작동 검증, 로그 모니터링 및 통계 기능 정상 작동.
</info added on 2025-08-24T13:25:11.717Z>

## 5. 백업/복구 전략 및 로그 관리 시스템 구축 [done]
### Dependencies: 25.2, 25.4
### Description: Docker 환경에 맞는 데이터베이스와 파일 저장소 백업/복구 스크립트를 작성하고, 중앙화된 로그 관리 시스템을 구축합니다.
### Details:
MariaDB 덤프 백업 스크립트를 Docker 컨테이너에서 실행 가능하도록 수정. 파일 저장소 볼륨 백업 자동화. 로그 드라이버 설정 및 로테이션 정책 적용. 백업 스케줄링을 위한 cron 컨테이너 추가.

